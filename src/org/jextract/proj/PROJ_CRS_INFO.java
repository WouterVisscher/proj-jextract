// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char *auth_name;
 *     char *code;
 *     char *name;
 *     PJ_TYPE type;
 *     int deprecated;
 *     int bbox_valid;
 *     double west_lon_degree;
 *     double south_lat_degree;
 *     double east_lon_degree;
 *     double north_lat_degree;
 *     char *area_name;
 *     char *projection_method_name;
 *     char *celestial_body_name;
 * }
 * }
 */
public class PROJ_CRS_INFO {

    PROJ_CRS_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("auth_name"),
        proj_h.C_POINTER.withName("code"),
        proj_h.C_POINTER.withName("name"),
        proj_h.C_INT.withName("type"),
        proj_h.C_INT.withName("deprecated"),
        proj_h.C_INT.withName("bbox_valid"),
        MemoryLayout.paddingLayout(4),
        proj_h.C_DOUBLE.withName("west_lon_degree"),
        proj_h.C_DOUBLE.withName("south_lat_degree"),
        proj_h.C_DOUBLE.withName("east_lon_degree"),
        proj_h.C_DOUBLE.withName("north_lat_degree"),
        proj_h.C_POINTER.withName("area_name"),
        proj_h.C_POINTER.withName("projection_method_name"),
        proj_h.C_POINTER.withName("celestial_body_name")
    ).withName("$anon$942:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout auth_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("auth_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static final AddressLayout auth_name$layout() {
        return auth_name$LAYOUT;
    }

    private static final long auth_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static final long auth_name$offset() {
        return auth_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static MemorySegment auth_name(MemorySegment struct) {
        return struct.get(auth_name$LAYOUT, auth_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static void auth_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(auth_name$LAYOUT, auth_name$OFFSET, fieldValue);
    }

    private static final AddressLayout code$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static final AddressLayout code$layout() {
        return code$LAYOUT;
    }

    private static final long code$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static final long code$offset() {
        return code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static MemorySegment code(MemorySegment struct) {
        return struct.get(code$LAYOUT, code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static void code(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(code$LAYOUT, code$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_TYPE type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_TYPE type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_TYPE type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_TYPE type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt deprecated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deprecated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static final OfInt deprecated$layout() {
        return deprecated$LAYOUT;
    }

    private static final long deprecated$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static final long deprecated$offset() {
        return deprecated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static int deprecated(MemorySegment struct) {
        return struct.get(deprecated$LAYOUT, deprecated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static void deprecated(MemorySegment struct, int fieldValue) {
        struct.set(deprecated$LAYOUT, deprecated$OFFSET, fieldValue);
    }

    private static final OfInt bbox_valid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bbox_valid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static final OfInt bbox_valid$layout() {
        return bbox_valid$LAYOUT;
    }

    private static final long bbox_valid$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static final long bbox_valid$offset() {
        return bbox_valid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static int bbox_valid(MemorySegment struct) {
        return struct.get(bbox_valid$LAYOUT, bbox_valid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static void bbox_valid(MemorySegment struct, int fieldValue) {
        struct.set(bbox_valid$LAYOUT, bbox_valid$OFFSET, fieldValue);
    }

    private static final OfDouble west_lon_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("west_lon_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static final OfDouble west_lon_degree$layout() {
        return west_lon_degree$LAYOUT;
    }

    private static final long west_lon_degree$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static final long west_lon_degree$offset() {
        return west_lon_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static double west_lon_degree(MemorySegment struct) {
        return struct.get(west_lon_degree$LAYOUT, west_lon_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static void west_lon_degree(MemorySegment struct, double fieldValue) {
        struct.set(west_lon_degree$LAYOUT, west_lon_degree$OFFSET, fieldValue);
    }

    private static final OfDouble south_lat_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("south_lat_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static final OfDouble south_lat_degree$layout() {
        return south_lat_degree$LAYOUT;
    }

    private static final long south_lat_degree$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static final long south_lat_degree$offset() {
        return south_lat_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static double south_lat_degree(MemorySegment struct) {
        return struct.get(south_lat_degree$LAYOUT, south_lat_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static void south_lat_degree(MemorySegment struct, double fieldValue) {
        struct.set(south_lat_degree$LAYOUT, south_lat_degree$OFFSET, fieldValue);
    }

    private static final OfDouble east_lon_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("east_lon_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static final OfDouble east_lon_degree$layout() {
        return east_lon_degree$LAYOUT;
    }

    private static final long east_lon_degree$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static final long east_lon_degree$offset() {
        return east_lon_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static double east_lon_degree(MemorySegment struct) {
        return struct.get(east_lon_degree$LAYOUT, east_lon_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static void east_lon_degree(MemorySegment struct, double fieldValue) {
        struct.set(east_lon_degree$LAYOUT, east_lon_degree$OFFSET, fieldValue);
    }

    private static final OfDouble north_lat_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("north_lat_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static final OfDouble north_lat_degree$layout() {
        return north_lat_degree$LAYOUT;
    }

    private static final long north_lat_degree$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static final long north_lat_degree$offset() {
        return north_lat_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static double north_lat_degree(MemorySegment struct) {
        return struct.get(north_lat_degree$LAYOUT, north_lat_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static void north_lat_degree(MemorySegment struct, double fieldValue) {
        struct.set(north_lat_degree$LAYOUT, north_lat_degree$OFFSET, fieldValue);
    }

    private static final AddressLayout area_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("area_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *area_name
     * }
     */
    public static final AddressLayout area_name$layout() {
        return area_name$LAYOUT;
    }

    private static final long area_name$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *area_name
     * }
     */
    public static final long area_name$offset() {
        return area_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *area_name
     * }
     */
    public static MemorySegment area_name(MemorySegment struct) {
        return struct.get(area_name$LAYOUT, area_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *area_name
     * }
     */
    public static void area_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(area_name$LAYOUT, area_name$OFFSET, fieldValue);
    }

    private static final AddressLayout projection_method_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("projection_method_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *projection_method_name
     * }
     */
    public static final AddressLayout projection_method_name$layout() {
        return projection_method_name$LAYOUT;
    }

    private static final long projection_method_name$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *projection_method_name
     * }
     */
    public static final long projection_method_name$offset() {
        return projection_method_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *projection_method_name
     * }
     */
    public static MemorySegment projection_method_name(MemorySegment struct) {
        return struct.get(projection_method_name$LAYOUT, projection_method_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *projection_method_name
     * }
     */
    public static void projection_method_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(projection_method_name$LAYOUT, projection_method_name$OFFSET, fieldValue);
    }

    private static final AddressLayout celestial_body_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("celestial_body_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *celestial_body_name
     * }
     */
    public static final AddressLayout celestial_body_name$layout() {
        return celestial_body_name$LAYOUT;
    }

    private static final long celestial_body_name$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *celestial_body_name
     * }
     */
    public static final long celestial_body_name$offset() {
        return celestial_body_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *celestial_body_name
     * }
     */
    public static MemorySegment celestial_body_name(MemorySegment struct) {
        return struct.get(celestial_body_name$LAYOUT, celestial_body_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *celestial_body_name
     * }
     */
    public static void celestial_body_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(celestial_body_name$LAYOUT, celestial_body_name$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

