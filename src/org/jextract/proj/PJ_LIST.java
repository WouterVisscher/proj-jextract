// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PJ_LIST {
 *     const char *id;
 *     PJ *(*proj)(PJ *);
 *     const char *const *descr;
 * }
 * }
 */
public class PJ_LIST {

    PJ_LIST() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("id"),
        proj_h.C_POINTER.withName("proj"),
        proj_h.C_POINTER.withName("descr")
    ).withName("PJ_LIST");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static final AddressLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * PJ *(*proj)(PJ *)
     * }
     */
    public static class proj {

        proj() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            proj_h.C_POINTER,
            proj_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = proj_h.upcallHandle(proj.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(proj.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout proj$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("proj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ *(*proj)(PJ *)
     * }
     */
    public static final AddressLayout proj$layout() {
        return proj$LAYOUT;
    }

    private static final long proj$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ *(*proj)(PJ *)
     * }
     */
    public static final long proj$offset() {
        return proj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ *(*proj)(PJ *)
     * }
     */
    public static MemorySegment proj(MemorySegment struct) {
        return struct.get(proj$LAYOUT, proj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ *(*proj)(PJ *)
     * }
     */
    public static void proj(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(proj$LAYOUT, proj$OFFSET, fieldValue);
    }

    private static final AddressLayout descr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("descr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *descr
     * }
     */
    public static final AddressLayout descr$layout() {
        return descr$LAYOUT;
    }

    private static final long descr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *descr
     * }
     */
    public static final long descr$offset() {
        return descr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *descr
     * }
     */
    public static MemorySegment descr(MemorySegment struct) {
        return struct.get(descr$LAYOUT, descr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *descr
     * }
     */
    public static void descr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(descr$LAYOUT, descr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

