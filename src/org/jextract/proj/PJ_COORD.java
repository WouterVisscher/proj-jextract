// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union PJ_COORD {
 *     double v[4];
 *     PJ_XYZT xyzt;
 *     PJ_UVWT uvwt;
 *     PJ_LPZT lpzt;
 *     PJ_GEOD geod;
 *     PJ_OPK opk;
 *     PJ_ENU enu;
 *     PJ_XYZ xyz;
 *     PJ_UVW uvw;
 *     PJ_LPZ lpz;
 *     PJ_XY xy;
 *     PJ_UV uv;
 *     PJ_LP lp;
 * }
 * }
 */
public class PJ_COORD {

    PJ_COORD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(4, proj_h.C_DOUBLE).withName("v"),
        PJ_XYZT.layout().withName("xyzt"),
        PJ_UVWT.layout().withName("uvwt"),
        PJ_LPZT.layout().withName("lpzt"),
        PJ_GEOD.layout().withName("geod"),
        PJ_OPK.layout().withName("opk"),
        PJ_ENU.layout().withName("enu"),
        PJ_XYZ.layout().withName("xyz"),
        PJ_UVW.layout().withName("uvw"),
        PJ_LPZ.layout().withName("lpz"),
        PJ_XY.layout().withName("xy"),
        PJ_UV.layout().withName("uv"),
        PJ_LP.layout().withName("lp")
    ).withName("PJ_COORD");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout v$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("v"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static final SequenceLayout v$layout() {
        return v$LAYOUT;
    }

    private static final long v$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static final long v$offset() {
        return v$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static MemorySegment v(MemorySegment union) {
        return union.asSlice(v$OFFSET, v$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static void v(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, v$OFFSET, v$LAYOUT.byteSize());
    }

    private static long[] v$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static long[] v$dimensions() {
        return v$DIMS;
    }
    private static final VarHandle v$ELEM_HANDLE = v$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static double v(MemorySegment union, long index0) {
        return (double)v$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double v[4]
     * }
     */
    public static void v(MemorySegment union, long index0, double fieldValue) {
        v$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final GroupLayout xyzt$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("xyzt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_XYZT xyzt
     * }
     */
    public static final GroupLayout xyzt$layout() {
        return xyzt$LAYOUT;
    }

    private static final long xyzt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_XYZT xyzt
     * }
     */
    public static final long xyzt$offset() {
        return xyzt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_XYZT xyzt
     * }
     */
    public static MemorySegment xyzt(MemorySegment union) {
        return union.asSlice(xyzt$OFFSET, xyzt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_XYZT xyzt
     * }
     */
    public static void xyzt(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, xyzt$OFFSET, xyzt$LAYOUT.byteSize());
    }

    private static final GroupLayout uvwt$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uvwt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_UVWT uvwt
     * }
     */
    public static final GroupLayout uvwt$layout() {
        return uvwt$LAYOUT;
    }

    private static final long uvwt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_UVWT uvwt
     * }
     */
    public static final long uvwt$offset() {
        return uvwt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_UVWT uvwt
     * }
     */
    public static MemorySegment uvwt(MemorySegment union) {
        return union.asSlice(uvwt$OFFSET, uvwt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_UVWT uvwt
     * }
     */
    public static void uvwt(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, uvwt$OFFSET, uvwt$LAYOUT.byteSize());
    }

    private static final GroupLayout lpzt$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lpzt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_LPZT lpzt
     * }
     */
    public static final GroupLayout lpzt$layout() {
        return lpzt$LAYOUT;
    }

    private static final long lpzt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_LPZT lpzt
     * }
     */
    public static final long lpzt$offset() {
        return lpzt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_LPZT lpzt
     * }
     */
    public static MemorySegment lpzt(MemorySegment union) {
        return union.asSlice(lpzt$OFFSET, lpzt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_LPZT lpzt
     * }
     */
    public static void lpzt(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, lpzt$OFFSET, lpzt$LAYOUT.byteSize());
    }

    private static final GroupLayout geod$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("geod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_GEOD geod
     * }
     */
    public static final GroupLayout geod$layout() {
        return geod$LAYOUT;
    }

    private static final long geod$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_GEOD geod
     * }
     */
    public static final long geod$offset() {
        return geod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_GEOD geod
     * }
     */
    public static MemorySegment geod(MemorySegment union) {
        return union.asSlice(geod$OFFSET, geod$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_GEOD geod
     * }
     */
    public static void geod(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, geod$OFFSET, geod$LAYOUT.byteSize());
    }

    private static final GroupLayout opk$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("opk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_OPK opk
     * }
     */
    public static final GroupLayout opk$layout() {
        return opk$LAYOUT;
    }

    private static final long opk$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_OPK opk
     * }
     */
    public static final long opk$offset() {
        return opk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_OPK opk
     * }
     */
    public static MemorySegment opk(MemorySegment union) {
        return union.asSlice(opk$OFFSET, opk$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_OPK opk
     * }
     */
    public static void opk(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, opk$OFFSET, opk$LAYOUT.byteSize());
    }

    private static final GroupLayout enu$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("enu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_ENU enu
     * }
     */
    public static final GroupLayout enu$layout() {
        return enu$LAYOUT;
    }

    private static final long enu$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_ENU enu
     * }
     */
    public static final long enu$offset() {
        return enu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_ENU enu
     * }
     */
    public static MemorySegment enu(MemorySegment union) {
        return union.asSlice(enu$OFFSET, enu$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_ENU enu
     * }
     */
    public static void enu(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, enu$OFFSET, enu$LAYOUT.byteSize());
    }

    private static final GroupLayout xyz$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("xyz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_XYZ xyz
     * }
     */
    public static final GroupLayout xyz$layout() {
        return xyz$LAYOUT;
    }

    private static final long xyz$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_XYZ xyz
     * }
     */
    public static final long xyz$offset() {
        return xyz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_XYZ xyz
     * }
     */
    public static MemorySegment xyz(MemorySegment union) {
        return union.asSlice(xyz$OFFSET, xyz$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_XYZ xyz
     * }
     */
    public static void xyz(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, xyz$OFFSET, xyz$LAYOUT.byteSize());
    }

    private static final GroupLayout uvw$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uvw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_UVW uvw
     * }
     */
    public static final GroupLayout uvw$layout() {
        return uvw$LAYOUT;
    }

    private static final long uvw$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_UVW uvw
     * }
     */
    public static final long uvw$offset() {
        return uvw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_UVW uvw
     * }
     */
    public static MemorySegment uvw(MemorySegment union) {
        return union.asSlice(uvw$OFFSET, uvw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_UVW uvw
     * }
     */
    public static void uvw(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, uvw$OFFSET, uvw$LAYOUT.byteSize());
    }

    private static final GroupLayout lpz$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lpz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_LPZ lpz
     * }
     */
    public static final GroupLayout lpz$layout() {
        return lpz$LAYOUT;
    }

    private static final long lpz$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_LPZ lpz
     * }
     */
    public static final long lpz$offset() {
        return lpz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_LPZ lpz
     * }
     */
    public static MemorySegment lpz(MemorySegment union) {
        return union.asSlice(lpz$OFFSET, lpz$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_LPZ lpz
     * }
     */
    public static void lpz(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, lpz$OFFSET, lpz$LAYOUT.byteSize());
    }

    private static final GroupLayout xy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("xy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_XY xy
     * }
     */
    public static final GroupLayout xy$layout() {
        return xy$LAYOUT;
    }

    private static final long xy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_XY xy
     * }
     */
    public static final long xy$offset() {
        return xy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_XY xy
     * }
     */
    public static MemorySegment xy(MemorySegment union) {
        return union.asSlice(xy$OFFSET, xy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_XY xy
     * }
     */
    public static void xy(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, xy$OFFSET, xy$LAYOUT.byteSize());
    }

    private static final GroupLayout uv$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_UV uv
     * }
     */
    public static final GroupLayout uv$layout() {
        return uv$LAYOUT;
    }

    private static final long uv$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_UV uv
     * }
     */
    public static final long uv$offset() {
        return uv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_UV uv
     * }
     */
    public static MemorySegment uv(MemorySegment union) {
        return union.asSlice(uv$OFFSET, uv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_UV uv
     * }
     */
    public static void uv(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, uv$OFFSET, uv$LAYOUT.byteSize());
    }

    private static final GroupLayout lp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_LP lp
     * }
     */
    public static final GroupLayout lp$layout() {
        return lp$LAYOUT;
    }

    private static final long lp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_LP lp
     * }
     */
    public static final long lp$offset() {
        return lp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_LP lp
     * }
     */
    public static MemorySegment lp(MemorySegment union) {
        return union.asSlice(lp$OFFSET, lp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_LP lp
     * }
     */
    public static void lp(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, lp$OFFSET, lp$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

