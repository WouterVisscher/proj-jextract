// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PJ_PROJ_INFO {
 *     const char *id;
 *     const char *description;
 *     const char *definition;
 *     int has_inverse;
 *     double accuracy;
 * }
 * }
 */
public class PJ_PROJ_INFO {

    PJ_PROJ_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("id"),
        proj_h.C_POINTER.withName("description"),
        proj_h.C_POINTER.withName("definition"),
        proj_h.C_INT.withName("has_inverse"),
        MemoryLayout.paddingLayout(4),
        proj_h.C_DOUBLE.withName("accuracy")
    ).withName("PJ_PROJ_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static final AddressLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout definition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("definition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *definition
     * }
     */
    public static final AddressLayout definition$layout() {
        return definition$LAYOUT;
    }

    private static final long definition$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *definition
     * }
     */
    public static final long definition$offset() {
        return definition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *definition
     * }
     */
    public static MemorySegment definition(MemorySegment struct) {
        return struct.get(definition$LAYOUT, definition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *definition
     * }
     */
    public static void definition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(definition$LAYOUT, definition$OFFSET, fieldValue);
    }

    private static final OfInt has_inverse$LAYOUT = (OfInt)$LAYOUT.select(groupElement("has_inverse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int has_inverse
     * }
     */
    public static final OfInt has_inverse$layout() {
        return has_inverse$LAYOUT;
    }

    private static final long has_inverse$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int has_inverse
     * }
     */
    public static final long has_inverse$offset() {
        return has_inverse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int has_inverse
     * }
     */
    public static int has_inverse(MemorySegment struct) {
        return struct.get(has_inverse$LAYOUT, has_inverse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int has_inverse
     * }
     */
    public static void has_inverse(MemorySegment struct, int fieldValue) {
        struct.set(has_inverse$LAYOUT, has_inverse$OFFSET, fieldValue);
    }

    private static final OfDouble accuracy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double accuracy
     * }
     */
    public static final OfDouble accuracy$layout() {
        return accuracy$LAYOUT;
    }

    private static final long accuracy$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double accuracy
     * }
     */
    public static final long accuracy$offset() {
        return accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double accuracy
     * }
     */
    public static double accuracy(MemorySegment struct) {
        return struct.get(accuracy$LAYOUT, accuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double accuracy
     * }
     */
    public static void accuracy(MemorySegment struct, double fieldValue) {
        struct.set(accuracy$LAYOUT, accuracy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

