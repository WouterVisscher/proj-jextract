// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     const PJ_TYPE *types;
 *     size_t typesCount;
 *     int crs_area_of_use_contains_bbox;
 *     int bbox_valid;
 *     double west_lon_degree;
 *     double south_lat_degree;
 *     double east_lon_degree;
 *     double north_lat_degree;
 *     int allow_deprecated;
 *     const char *celestial_body_name;
 * }
 * }
 */
public class PROJ_CRS_LIST_PARAMETERS {

    PROJ_CRS_LIST_PARAMETERS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("types"),
        proj_h.C_LONG.withName("typesCount"),
        proj_h.C_INT.withName("crs_area_of_use_contains_bbox"),
        proj_h.C_INT.withName("bbox_valid"),
        proj_h.C_DOUBLE.withName("west_lon_degree"),
        proj_h.C_DOUBLE.withName("south_lat_degree"),
        proj_h.C_DOUBLE.withName("east_lon_degree"),
        proj_h.C_DOUBLE.withName("north_lat_degree"),
        proj_h.C_INT.withName("allow_deprecated"),
        MemoryLayout.paddingLayout(4),
        proj_h.C_POINTER.withName("celestial_body_name")
    ).withName("$anon$982:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout types$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("types"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const PJ_TYPE *types
     * }
     */
    public static final AddressLayout types$layout() {
        return types$LAYOUT;
    }

    private static final long types$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const PJ_TYPE *types
     * }
     */
    public static final long types$offset() {
        return types$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const PJ_TYPE *types
     * }
     */
    public static MemorySegment types(MemorySegment struct) {
        return struct.get(types$LAYOUT, types$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const PJ_TYPE *types
     * }
     */
    public static void types(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(types$LAYOUT, types$OFFSET, fieldValue);
    }

    private static final OfLong typesCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("typesCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t typesCount
     * }
     */
    public static final OfLong typesCount$layout() {
        return typesCount$LAYOUT;
    }

    private static final long typesCount$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t typesCount
     * }
     */
    public static final long typesCount$offset() {
        return typesCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t typesCount
     * }
     */
    public static long typesCount(MemorySegment struct) {
        return struct.get(typesCount$LAYOUT, typesCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t typesCount
     * }
     */
    public static void typesCount(MemorySegment struct, long fieldValue) {
        struct.set(typesCount$LAYOUT, typesCount$OFFSET, fieldValue);
    }

    private static final OfInt crs_area_of_use_contains_bbox$LAYOUT = (OfInt)$LAYOUT.select(groupElement("crs_area_of_use_contains_bbox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int crs_area_of_use_contains_bbox
     * }
     */
    public static final OfInt crs_area_of_use_contains_bbox$layout() {
        return crs_area_of_use_contains_bbox$LAYOUT;
    }

    private static final long crs_area_of_use_contains_bbox$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int crs_area_of_use_contains_bbox
     * }
     */
    public static final long crs_area_of_use_contains_bbox$offset() {
        return crs_area_of_use_contains_bbox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int crs_area_of_use_contains_bbox
     * }
     */
    public static int crs_area_of_use_contains_bbox(MemorySegment struct) {
        return struct.get(crs_area_of_use_contains_bbox$LAYOUT, crs_area_of_use_contains_bbox$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int crs_area_of_use_contains_bbox
     * }
     */
    public static void crs_area_of_use_contains_bbox(MemorySegment struct, int fieldValue) {
        struct.set(crs_area_of_use_contains_bbox$LAYOUT, crs_area_of_use_contains_bbox$OFFSET, fieldValue);
    }

    private static final OfInt bbox_valid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bbox_valid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static final OfInt bbox_valid$layout() {
        return bbox_valid$LAYOUT;
    }

    private static final long bbox_valid$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static final long bbox_valid$offset() {
        return bbox_valid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static int bbox_valid(MemorySegment struct) {
        return struct.get(bbox_valid$LAYOUT, bbox_valid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bbox_valid
     * }
     */
    public static void bbox_valid(MemorySegment struct, int fieldValue) {
        struct.set(bbox_valid$LAYOUT, bbox_valid$OFFSET, fieldValue);
    }

    private static final OfDouble west_lon_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("west_lon_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static final OfDouble west_lon_degree$layout() {
        return west_lon_degree$LAYOUT;
    }

    private static final long west_lon_degree$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static final long west_lon_degree$offset() {
        return west_lon_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static double west_lon_degree(MemorySegment struct) {
        return struct.get(west_lon_degree$LAYOUT, west_lon_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double west_lon_degree
     * }
     */
    public static void west_lon_degree(MemorySegment struct, double fieldValue) {
        struct.set(west_lon_degree$LAYOUT, west_lon_degree$OFFSET, fieldValue);
    }

    private static final OfDouble south_lat_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("south_lat_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static final OfDouble south_lat_degree$layout() {
        return south_lat_degree$LAYOUT;
    }

    private static final long south_lat_degree$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static final long south_lat_degree$offset() {
        return south_lat_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static double south_lat_degree(MemorySegment struct) {
        return struct.get(south_lat_degree$LAYOUT, south_lat_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double south_lat_degree
     * }
     */
    public static void south_lat_degree(MemorySegment struct, double fieldValue) {
        struct.set(south_lat_degree$LAYOUT, south_lat_degree$OFFSET, fieldValue);
    }

    private static final OfDouble east_lon_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("east_lon_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static final OfDouble east_lon_degree$layout() {
        return east_lon_degree$LAYOUT;
    }

    private static final long east_lon_degree$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static final long east_lon_degree$offset() {
        return east_lon_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static double east_lon_degree(MemorySegment struct) {
        return struct.get(east_lon_degree$LAYOUT, east_lon_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double east_lon_degree
     * }
     */
    public static void east_lon_degree(MemorySegment struct, double fieldValue) {
        struct.set(east_lon_degree$LAYOUT, east_lon_degree$OFFSET, fieldValue);
    }

    private static final OfDouble north_lat_degree$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("north_lat_degree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static final OfDouble north_lat_degree$layout() {
        return north_lat_degree$LAYOUT;
    }

    private static final long north_lat_degree$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static final long north_lat_degree$offset() {
        return north_lat_degree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static double north_lat_degree(MemorySegment struct) {
        return struct.get(north_lat_degree$LAYOUT, north_lat_degree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double north_lat_degree
     * }
     */
    public static void north_lat_degree(MemorySegment struct, double fieldValue) {
        struct.set(north_lat_degree$LAYOUT, north_lat_degree$OFFSET, fieldValue);
    }

    private static final OfInt allow_deprecated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allow_deprecated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allow_deprecated
     * }
     */
    public static final OfInt allow_deprecated$layout() {
        return allow_deprecated$LAYOUT;
    }

    private static final long allow_deprecated$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allow_deprecated
     * }
     */
    public static final long allow_deprecated$offset() {
        return allow_deprecated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allow_deprecated
     * }
     */
    public static int allow_deprecated(MemorySegment struct) {
        return struct.get(allow_deprecated$LAYOUT, allow_deprecated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allow_deprecated
     * }
     */
    public static void allow_deprecated(MemorySegment struct, int fieldValue) {
        struct.set(allow_deprecated$LAYOUT, allow_deprecated$OFFSET, fieldValue);
    }

    private static final AddressLayout celestial_body_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("celestial_body_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *celestial_body_name
     * }
     */
    public static final AddressLayout celestial_body_name$layout() {
        return celestial_body_name$LAYOUT;
    }

    private static final long celestial_body_name$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *celestial_body_name
     * }
     */
    public static final long celestial_body_name$offset() {
        return celestial_body_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *celestial_body_name
     * }
     */
    public static MemorySegment celestial_body_name(MemorySegment struct) {
        return struct.get(celestial_body_name$LAYOUT, celestial_body_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *celestial_body_name
     * }
     */
    public static void celestial_body_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(celestial_body_name$LAYOUT, celestial_body_name$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

