// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     double e;
 *     double n;
 *     double u;
 * }
 * }
 */
public class PJ_ENU {

    PJ_ENU() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_DOUBLE.withName("e"),
        proj_h.C_DOUBLE.withName("n"),
        proj_h.C_DOUBLE.withName("u")
    ).withName("$anon$273:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble e$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("e"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double e
     * }
     */
    public static final OfDouble e$layout() {
        return e$LAYOUT;
    }

    private static final long e$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double e
     * }
     */
    public static final long e$offset() {
        return e$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double e
     * }
     */
    public static double e(MemorySegment struct) {
        return struct.get(e$LAYOUT, e$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double e
     * }
     */
    public static void e(MemorySegment struct, double fieldValue) {
        struct.set(e$LAYOUT, e$OFFSET, fieldValue);
    }

    private static final OfDouble n$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double n
     * }
     */
    public static final OfDouble n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double n
     * }
     */
    public static double n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double n
     * }
     */
    public static void n(MemorySegment struct, double fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final OfDouble u$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static final OfDouble u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static double u(MemorySegment struct) {
        return struct.get(u$LAYOUT, u$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static void u(MemorySegment struct, double fieldValue) {
        struct.set(u$LAYOUT, u$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

