// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PJ_ELLPS {
 *     const char *id;
 *     const char *major;
 *     const char *ell;
 *     const char *name;
 * }
 * }
 */
public class PJ_ELLPS {

    PJ_ELLPS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("id"),
        proj_h.C_POINTER.withName("major"),
        proj_h.C_POINTER.withName("ell"),
        proj_h.C_POINTER.withName("name")
    ).withName("PJ_ELLPS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static final AddressLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout major$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("major"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *major
     * }
     */
    public static final AddressLayout major$layout() {
        return major$LAYOUT;
    }

    private static final long major$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *major
     * }
     */
    public static final long major$offset() {
        return major$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *major
     * }
     */
    public static MemorySegment major(MemorySegment struct) {
        return struct.get(major$LAYOUT, major$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *major
     * }
     */
    public static void major(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(major$LAYOUT, major$OFFSET, fieldValue);
    }

    private static final AddressLayout ell$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ell"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *ell
     * }
     */
    public static final AddressLayout ell$layout() {
        return ell$LAYOUT;
    }

    private static final long ell$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *ell
     * }
     */
    public static final long ell$offset() {
        return ell$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *ell
     * }
     */
    public static MemorySegment ell(MemorySegment struct) {
        return struct.get(ell$LAYOUT, ell$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *ell
     * }
     */
    public static void ell(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ell$LAYOUT, ell$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

