// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct P5_FACTORS {
 *     double meridional_scale;
 *     double parallel_scale;
 *     double areal_scale;
 *     double angular_distortion;
 *     double meridian_parallel_angle;
 *     double meridian_convergence;
 *     double tissot_semimajor;
 *     double tissot_semiminor;
 *     double dx_dlam;
 *     double dx_dphi;
 *     double dy_dlam;
 *     double dy_dphi;
 * }
 * }
 */
public class P5_FACTORS {

    P5_FACTORS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_DOUBLE.withName("meridional_scale"),
        proj_h.C_DOUBLE.withName("parallel_scale"),
        proj_h.C_DOUBLE.withName("areal_scale"),
        proj_h.C_DOUBLE.withName("angular_distortion"),
        proj_h.C_DOUBLE.withName("meridian_parallel_angle"),
        proj_h.C_DOUBLE.withName("meridian_convergence"),
        proj_h.C_DOUBLE.withName("tissot_semimajor"),
        proj_h.C_DOUBLE.withName("tissot_semiminor"),
        proj_h.C_DOUBLE.withName("dx_dlam"),
        proj_h.C_DOUBLE.withName("dx_dphi"),
        proj_h.C_DOUBLE.withName("dy_dlam"),
        proj_h.C_DOUBLE.withName("dy_dphi")
    ).withName("P5_FACTORS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble meridional_scale$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("meridional_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double meridional_scale
     * }
     */
    public static final OfDouble meridional_scale$layout() {
        return meridional_scale$LAYOUT;
    }

    private static final long meridional_scale$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double meridional_scale
     * }
     */
    public static final long meridional_scale$offset() {
        return meridional_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double meridional_scale
     * }
     */
    public static double meridional_scale(MemorySegment struct) {
        return struct.get(meridional_scale$LAYOUT, meridional_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double meridional_scale
     * }
     */
    public static void meridional_scale(MemorySegment struct, double fieldValue) {
        struct.set(meridional_scale$LAYOUT, meridional_scale$OFFSET, fieldValue);
    }

    private static final OfDouble parallel_scale$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("parallel_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double parallel_scale
     * }
     */
    public static final OfDouble parallel_scale$layout() {
        return parallel_scale$LAYOUT;
    }

    private static final long parallel_scale$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double parallel_scale
     * }
     */
    public static final long parallel_scale$offset() {
        return parallel_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double parallel_scale
     * }
     */
    public static double parallel_scale(MemorySegment struct) {
        return struct.get(parallel_scale$LAYOUT, parallel_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double parallel_scale
     * }
     */
    public static void parallel_scale(MemorySegment struct, double fieldValue) {
        struct.set(parallel_scale$LAYOUT, parallel_scale$OFFSET, fieldValue);
    }

    private static final OfDouble areal_scale$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("areal_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double areal_scale
     * }
     */
    public static final OfDouble areal_scale$layout() {
        return areal_scale$LAYOUT;
    }

    private static final long areal_scale$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double areal_scale
     * }
     */
    public static final long areal_scale$offset() {
        return areal_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double areal_scale
     * }
     */
    public static double areal_scale(MemorySegment struct) {
        return struct.get(areal_scale$LAYOUT, areal_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double areal_scale
     * }
     */
    public static void areal_scale(MemorySegment struct, double fieldValue) {
        struct.set(areal_scale$LAYOUT, areal_scale$OFFSET, fieldValue);
    }

    private static final OfDouble angular_distortion$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("angular_distortion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double angular_distortion
     * }
     */
    public static final OfDouble angular_distortion$layout() {
        return angular_distortion$LAYOUT;
    }

    private static final long angular_distortion$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double angular_distortion
     * }
     */
    public static final long angular_distortion$offset() {
        return angular_distortion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double angular_distortion
     * }
     */
    public static double angular_distortion(MemorySegment struct) {
        return struct.get(angular_distortion$LAYOUT, angular_distortion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double angular_distortion
     * }
     */
    public static void angular_distortion(MemorySegment struct, double fieldValue) {
        struct.set(angular_distortion$LAYOUT, angular_distortion$OFFSET, fieldValue);
    }

    private static final OfDouble meridian_parallel_angle$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("meridian_parallel_angle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double meridian_parallel_angle
     * }
     */
    public static final OfDouble meridian_parallel_angle$layout() {
        return meridian_parallel_angle$LAYOUT;
    }

    private static final long meridian_parallel_angle$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double meridian_parallel_angle
     * }
     */
    public static final long meridian_parallel_angle$offset() {
        return meridian_parallel_angle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double meridian_parallel_angle
     * }
     */
    public static double meridian_parallel_angle(MemorySegment struct) {
        return struct.get(meridian_parallel_angle$LAYOUT, meridian_parallel_angle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double meridian_parallel_angle
     * }
     */
    public static void meridian_parallel_angle(MemorySegment struct, double fieldValue) {
        struct.set(meridian_parallel_angle$LAYOUT, meridian_parallel_angle$OFFSET, fieldValue);
    }

    private static final OfDouble meridian_convergence$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("meridian_convergence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double meridian_convergence
     * }
     */
    public static final OfDouble meridian_convergence$layout() {
        return meridian_convergence$LAYOUT;
    }

    private static final long meridian_convergence$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double meridian_convergence
     * }
     */
    public static final long meridian_convergence$offset() {
        return meridian_convergence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double meridian_convergence
     * }
     */
    public static double meridian_convergence(MemorySegment struct) {
        return struct.get(meridian_convergence$LAYOUT, meridian_convergence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double meridian_convergence
     * }
     */
    public static void meridian_convergence(MemorySegment struct, double fieldValue) {
        struct.set(meridian_convergence$LAYOUT, meridian_convergence$OFFSET, fieldValue);
    }

    private static final OfDouble tissot_semimajor$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("tissot_semimajor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double tissot_semimajor
     * }
     */
    public static final OfDouble tissot_semimajor$layout() {
        return tissot_semimajor$LAYOUT;
    }

    private static final long tissot_semimajor$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double tissot_semimajor
     * }
     */
    public static final long tissot_semimajor$offset() {
        return tissot_semimajor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double tissot_semimajor
     * }
     */
    public static double tissot_semimajor(MemorySegment struct) {
        return struct.get(tissot_semimajor$LAYOUT, tissot_semimajor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double tissot_semimajor
     * }
     */
    public static void tissot_semimajor(MemorySegment struct, double fieldValue) {
        struct.set(tissot_semimajor$LAYOUT, tissot_semimajor$OFFSET, fieldValue);
    }

    private static final OfDouble tissot_semiminor$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("tissot_semiminor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double tissot_semiminor
     * }
     */
    public static final OfDouble tissot_semiminor$layout() {
        return tissot_semiminor$LAYOUT;
    }

    private static final long tissot_semiminor$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double tissot_semiminor
     * }
     */
    public static final long tissot_semiminor$offset() {
        return tissot_semiminor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double tissot_semiminor
     * }
     */
    public static double tissot_semiminor(MemorySegment struct) {
        return struct.get(tissot_semiminor$LAYOUT, tissot_semiminor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double tissot_semiminor
     * }
     */
    public static void tissot_semiminor(MemorySegment struct, double fieldValue) {
        struct.set(tissot_semiminor$LAYOUT, tissot_semiminor$OFFSET, fieldValue);
    }

    private static final OfDouble dx_dlam$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dx_dlam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dx_dlam
     * }
     */
    public static final OfDouble dx_dlam$layout() {
        return dx_dlam$LAYOUT;
    }

    private static final long dx_dlam$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dx_dlam
     * }
     */
    public static final long dx_dlam$offset() {
        return dx_dlam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dx_dlam
     * }
     */
    public static double dx_dlam(MemorySegment struct) {
        return struct.get(dx_dlam$LAYOUT, dx_dlam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dx_dlam
     * }
     */
    public static void dx_dlam(MemorySegment struct, double fieldValue) {
        struct.set(dx_dlam$LAYOUT, dx_dlam$OFFSET, fieldValue);
    }

    private static final OfDouble dx_dphi$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dx_dphi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dx_dphi
     * }
     */
    public static final OfDouble dx_dphi$layout() {
        return dx_dphi$LAYOUT;
    }

    private static final long dx_dphi$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dx_dphi
     * }
     */
    public static final long dx_dphi$offset() {
        return dx_dphi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dx_dphi
     * }
     */
    public static double dx_dphi(MemorySegment struct) {
        return struct.get(dx_dphi$LAYOUT, dx_dphi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dx_dphi
     * }
     */
    public static void dx_dphi(MemorySegment struct, double fieldValue) {
        struct.set(dx_dphi$LAYOUT, dx_dphi$OFFSET, fieldValue);
    }

    private static final OfDouble dy_dlam$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dy_dlam"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dy_dlam
     * }
     */
    public static final OfDouble dy_dlam$layout() {
        return dy_dlam$LAYOUT;
    }

    private static final long dy_dlam$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dy_dlam
     * }
     */
    public static final long dy_dlam$offset() {
        return dy_dlam$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dy_dlam
     * }
     */
    public static double dy_dlam(MemorySegment struct) {
        return struct.get(dy_dlam$LAYOUT, dy_dlam$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dy_dlam
     * }
     */
    public static void dy_dlam(MemorySegment struct, double fieldValue) {
        struct.set(dy_dlam$LAYOUT, dy_dlam$OFFSET, fieldValue);
    }

    private static final OfDouble dy_dphi$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("dy_dphi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double dy_dphi
     * }
     */
    public static final OfDouble dy_dphi$layout() {
        return dy_dphi$LAYOUT;
    }

    private static final long dy_dphi$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double dy_dphi
     * }
     */
    public static final long dy_dphi$offset() {
        return dy_dphi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double dy_dphi
     * }
     */
    public static double dy_dphi(MemorySegment struct) {
        return struct.get(dy_dphi$LAYOUT, dy_dphi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double dy_dphi
     * }
     */
    public static void dy_dphi(MemorySegment struct, double fieldValue) {
        struct.set(dy_dphi$LAYOUT, dy_dphi$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

