// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     double s;
 *     double a1;
 *     double a2;
 * }
 * }
 */
public class PJ_GEOD {

    PJ_GEOD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_DOUBLE.withName("s"),
        proj_h.C_DOUBLE.withName("a1"),
        proj_h.C_DOUBLE.withName("a2")
    ).withName("$anon$274:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble s$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("s"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double s
     * }
     */
    public static final OfDouble s$layout() {
        return s$LAYOUT;
    }

    private static final long s$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double s
     * }
     */
    public static final long s$offset() {
        return s$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double s
     * }
     */
    public static double s(MemorySegment struct) {
        return struct.get(s$LAYOUT, s$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double s
     * }
     */
    public static void s(MemorySegment struct, double fieldValue) {
        struct.set(s$LAYOUT, s$OFFSET, fieldValue);
    }

    private static final OfDouble a1$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("a1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double a1
     * }
     */
    public static final OfDouble a1$layout() {
        return a1$LAYOUT;
    }

    private static final long a1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double a1
     * }
     */
    public static final long a1$offset() {
        return a1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double a1
     * }
     */
    public static double a1(MemorySegment struct) {
        return struct.get(a1$LAYOUT, a1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double a1
     * }
     */
    public static void a1(MemorySegment struct, double fieldValue) {
        struct.set(a1$LAYOUT, a1$OFFSET, fieldValue);
    }

    private static final OfDouble a2$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("a2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double a2
     * }
     */
    public static final OfDouble a2$layout() {
        return a2$LAYOUT;
    }

    private static final long a2$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double a2
     * }
     */
    public static final long a2$offset() {
        return a2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double a2
     * }
     */
    public static double a2(MemorySegment struct) {
        return struct.get(a2$LAYOUT, a2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double a2
     * }
     */
    public static void a2(MemorySegment struct, double fieldValue) {
        struct.set(a2$LAYOUT, a2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

