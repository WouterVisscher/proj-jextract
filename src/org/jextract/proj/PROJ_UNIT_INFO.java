// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char *auth_name;
 *     char *code;
 *     char *name;
 *     char *category;
 *     double conv_factor;
 *     char *proj_short_name;
 *     int deprecated;
 * }
 * }
 */
public class PROJ_UNIT_INFO {

    PROJ_UNIT_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_POINTER.withName("auth_name"),
        proj_h.C_POINTER.withName("code"),
        proj_h.C_POINTER.withName("name"),
        proj_h.C_POINTER.withName("category"),
        proj_h.C_DOUBLE.withName("conv_factor"),
        proj_h.C_POINTER.withName("proj_short_name"),
        proj_h.C_INT.withName("deprecated"),
        MemoryLayout.paddingLayout(4)
    ).withName("$anon$1023:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout auth_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("auth_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static final AddressLayout auth_name$layout() {
        return auth_name$LAYOUT;
    }

    private static final long auth_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static final long auth_name$offset() {
        return auth_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static MemorySegment auth_name(MemorySegment struct) {
        return struct.get(auth_name$LAYOUT, auth_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *auth_name
     * }
     */
    public static void auth_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(auth_name$LAYOUT, auth_name$OFFSET, fieldValue);
    }

    private static final AddressLayout code$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static final AddressLayout code$layout() {
        return code$LAYOUT;
    }

    private static final long code$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static final long code$offset() {
        return code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static MemorySegment code(MemorySegment struct) {
        return struct.get(code$LAYOUT, code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *code
     * }
     */
    public static void code(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(code$LAYOUT, code$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout category$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("category"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *category
     * }
     */
    public static final AddressLayout category$layout() {
        return category$LAYOUT;
    }

    private static final long category$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *category
     * }
     */
    public static final long category$offset() {
        return category$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *category
     * }
     */
    public static MemorySegment category(MemorySegment struct) {
        return struct.get(category$LAYOUT, category$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *category
     * }
     */
    public static void category(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(category$LAYOUT, category$OFFSET, fieldValue);
    }

    private static final OfDouble conv_factor$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("conv_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double conv_factor
     * }
     */
    public static final OfDouble conv_factor$layout() {
        return conv_factor$LAYOUT;
    }

    private static final long conv_factor$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double conv_factor
     * }
     */
    public static final long conv_factor$offset() {
        return conv_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double conv_factor
     * }
     */
    public static double conv_factor(MemorySegment struct) {
        return struct.get(conv_factor$LAYOUT, conv_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double conv_factor
     * }
     */
    public static void conv_factor(MemorySegment struct, double fieldValue) {
        struct.set(conv_factor$LAYOUT, conv_factor$OFFSET, fieldValue);
    }

    private static final AddressLayout proj_short_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("proj_short_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *proj_short_name
     * }
     */
    public static final AddressLayout proj_short_name$layout() {
        return proj_short_name$LAYOUT;
    }

    private static final long proj_short_name$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *proj_short_name
     * }
     */
    public static final long proj_short_name$offset() {
        return proj_short_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *proj_short_name
     * }
     */
    public static MemorySegment proj_short_name(MemorySegment struct) {
        return struct.get(proj_short_name$LAYOUT, proj_short_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *proj_short_name
     * }
     */
    public static void proj_short_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(proj_short_name$LAYOUT, proj_short_name$OFFSET, fieldValue);
    }

    private static final OfInt deprecated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deprecated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static final OfInt deprecated$layout() {
        return deprecated$LAYOUT;
    }

    private static final long deprecated$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static final long deprecated$offset() {
        return deprecated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static int deprecated(MemorySegment struct) {
        return struct.get(deprecated$LAYOUT, deprecated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int deprecated
     * }
     */
    public static void deprecated(MemorySegment struct, int fieldValue) {
        struct.set(deprecated$LAYOUT, deprecated$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

