// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PJ_GRID_INFO {
 *     char gridname[32];
 *     char filename[260];
 *     char format[8];
 *     PJ_LP lowerleft;
 *     PJ_LP upperright;
 *     int n_lon;
 *     int n_lat;
 *     double cs_lon;
 *     double cs_lat;
 * }
 * }
 */
public class PJ_GRID_INFO {

    PJ_GRID_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(32, proj_h.C_CHAR).withName("gridname"),
        MemoryLayout.sequenceLayout(260, proj_h.C_CHAR).withName("filename"),
        MemoryLayout.sequenceLayout(8, proj_h.C_CHAR).withName("format"),
        MemoryLayout.paddingLayout(4),
        PJ_LP.layout().withName("lowerleft"),
        PJ_LP.layout().withName("upperright"),
        proj_h.C_INT.withName("n_lon"),
        proj_h.C_INT.withName("n_lat"),
        proj_h.C_DOUBLE.withName("cs_lon"),
        proj_h.C_DOUBLE.withName("cs_lat")
    ).withName("PJ_GRID_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout gridname$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("gridname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static final SequenceLayout gridname$layout() {
        return gridname$LAYOUT;
    }

    private static final long gridname$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static final long gridname$offset() {
        return gridname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static MemorySegment gridname(MemorySegment struct) {
        return struct.asSlice(gridname$OFFSET, gridname$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static void gridname(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gridname$OFFSET, gridname$LAYOUT.byteSize());
    }

    private static long[] gridname$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static long[] gridname$dimensions() {
        return gridname$DIMS;
    }
    private static final VarHandle gridname$ELEM_HANDLE = gridname$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static byte gridname(MemorySegment struct, long index0) {
        return (byte)gridname$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char gridname[32]
     * }
     */
    public static void gridname(MemorySegment struct, long index0, byte fieldValue) {
        gridname$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout filename$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static final SequenceLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.asSlice(filename$OFFSET, filename$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filename$OFFSET, filename$LAYOUT.byteSize());
    }

    private static long[] filename$DIMS = { 260 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static long[] filename$dimensions() {
        return filename$DIMS;
    }
    private static final VarHandle filename$ELEM_HANDLE = filename$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static byte filename(MemorySegment struct, long index0) {
        return (byte)filename$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static void filename(MemorySegment struct, long index0, byte fieldValue) {
        filename$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout format$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static final SequenceLayout format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static MemorySegment format(MemorySegment struct) {
        return struct.asSlice(format$OFFSET, format$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static void format(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, format$OFFSET, format$LAYOUT.byteSize());
    }

    private static long[] format$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static long[] format$dimensions() {
        return format$DIMS;
    }
    private static final VarHandle format$ELEM_HANDLE = format$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static byte format(MemorySegment struct, long index0) {
        return (byte)format$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char format[8]
     * }
     */
    public static void format(MemorySegment struct, long index0, byte fieldValue) {
        format$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout lowerleft$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lowerleft"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_LP lowerleft
     * }
     */
    public static final GroupLayout lowerleft$layout() {
        return lowerleft$LAYOUT;
    }

    private static final long lowerleft$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_LP lowerleft
     * }
     */
    public static final long lowerleft$offset() {
        return lowerleft$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_LP lowerleft
     * }
     */
    public static MemorySegment lowerleft(MemorySegment struct) {
        return struct.asSlice(lowerleft$OFFSET, lowerleft$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_LP lowerleft
     * }
     */
    public static void lowerleft(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lowerleft$OFFSET, lowerleft$LAYOUT.byteSize());
    }

    private static final GroupLayout upperright$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("upperright"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PJ_LP upperright
     * }
     */
    public static final GroupLayout upperright$layout() {
        return upperright$LAYOUT;
    }

    private static final long upperright$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PJ_LP upperright
     * }
     */
    public static final long upperright$offset() {
        return upperright$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PJ_LP upperright
     * }
     */
    public static MemorySegment upperright(MemorySegment struct) {
        return struct.asSlice(upperright$OFFSET, upperright$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PJ_LP upperright
     * }
     */
    public static void upperright(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, upperright$OFFSET, upperright$LAYOUT.byteSize());
    }

    private static final OfInt n_lon$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_lon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n_lon
     * }
     */
    public static final OfInt n_lon$layout() {
        return n_lon$LAYOUT;
    }

    private static final long n_lon$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n_lon
     * }
     */
    public static final long n_lon$offset() {
        return n_lon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_lon
     * }
     */
    public static int n_lon(MemorySegment struct) {
        return struct.get(n_lon$LAYOUT, n_lon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_lon
     * }
     */
    public static void n_lon(MemorySegment struct, int fieldValue) {
        struct.set(n_lon$LAYOUT, n_lon$OFFSET, fieldValue);
    }

    private static final OfInt n_lat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_lat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n_lat
     * }
     */
    public static final OfInt n_lat$layout() {
        return n_lat$LAYOUT;
    }

    private static final long n_lat$OFFSET = 340;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n_lat
     * }
     */
    public static final long n_lat$offset() {
        return n_lat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_lat
     * }
     */
    public static int n_lat(MemorySegment struct) {
        return struct.get(n_lat$LAYOUT, n_lat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_lat
     * }
     */
    public static void n_lat(MemorySegment struct, int fieldValue) {
        struct.set(n_lat$LAYOUT, n_lat$OFFSET, fieldValue);
    }

    private static final OfDouble cs_lon$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("cs_lon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double cs_lon
     * }
     */
    public static final OfDouble cs_lon$layout() {
        return cs_lon$LAYOUT;
    }

    private static final long cs_lon$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double cs_lon
     * }
     */
    public static final long cs_lon$offset() {
        return cs_lon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double cs_lon
     * }
     */
    public static double cs_lon(MemorySegment struct) {
        return struct.get(cs_lon$LAYOUT, cs_lon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double cs_lon
     * }
     */
    public static void cs_lon(MemorySegment struct, double fieldValue) {
        struct.set(cs_lon$LAYOUT, cs_lon$OFFSET, fieldValue);
    }

    private static final OfDouble cs_lat$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("cs_lat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double cs_lat
     * }
     */
    public static final OfDouble cs_lat$layout() {
        return cs_lat$LAYOUT;
    }

    private static final long cs_lat$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double cs_lat
     * }
     */
    public static final long cs_lat$offset() {
        return cs_lat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double cs_lat
     * }
     */
    public static double cs_lat(MemorySegment struct) {
        return struct.get(cs_lat$LAYOUT, cs_lat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double cs_lat
     * }
     */
    public static void cs_lat(MemorySegment struct, double fieldValue) {
        struct.set(cs_lat$LAYOUT, cs_lat$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

