// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     double u;
 *     double v;
 *     double w;
 *     double t;
 * }
 * }
 */
public class PJ_UVWT {

    PJ_UVWT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_DOUBLE.withName("u"),
        proj_h.C_DOUBLE.withName("v"),
        proj_h.C_DOUBLE.withName("w"),
        proj_h.C_DOUBLE.withName("t")
    ).withName("$anon$270:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble u$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static final OfDouble u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static double u(MemorySegment struct) {
        return struct.get(u$LAYOUT, u$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double u
     * }
     */
    public static void u(MemorySegment struct, double fieldValue) {
        struct.set(u$LAYOUT, u$OFFSET, fieldValue);
    }

    private static final OfDouble v$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("v"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double v
     * }
     */
    public static final OfDouble v$layout() {
        return v$LAYOUT;
    }

    private static final long v$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double v
     * }
     */
    public static final long v$offset() {
        return v$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double v
     * }
     */
    public static double v(MemorySegment struct) {
        return struct.get(v$LAYOUT, v$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double v
     * }
     */
    public static void v(MemorySegment struct, double fieldValue) {
        struct.set(v$LAYOUT, v$OFFSET, fieldValue);
    }

    private static final OfDouble w$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double w
     * }
     */
    public static final OfDouble w$layout() {
        return w$LAYOUT;
    }

    private static final long w$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double w
     * }
     */
    public static final long w$offset() {
        return w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double w
     * }
     */
    public static double w(MemorySegment struct) {
        return struct.get(w$LAYOUT, w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double w
     * }
     */
    public static void w(MemorySegment struct, double fieldValue) {
        struct.set(w$LAYOUT, w$OFFSET, fieldValue);
    }

    private static final OfDouble t$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("t"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double t
     * }
     */
    public static final OfDouble t$layout() {
        return t$LAYOUT;
    }

    private static final long t$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double t
     * }
     */
    public static final long t$offset() {
        return t$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double t
     * }
     */
    public static double t(MemorySegment struct) {
        return struct.get(t$LAYOUT, t$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double t
     * }
     */
    public static void t(MemorySegment struct, double fieldValue) {
        struct.set(t$LAYOUT, t$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

