// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PJ_INIT_INFO {
 *     char name[32];
 *     char filename[260];
 *     char version[32];
 *     char origin[32];
 *     char lastupdate[16];
 * }
 * }
 */
public class PJ_INIT_INFO {

    PJ_INIT_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(32, proj_h.C_CHAR).withName("name"),
        MemoryLayout.sequenceLayout(260, proj_h.C_CHAR).withName("filename"),
        MemoryLayout.sequenceLayout(32, proj_h.C_CHAR).withName("version"),
        MemoryLayout.sequenceLayout(32, proj_h.C_CHAR).withName("origin"),
        MemoryLayout.sequenceLayout(16, proj_h.C_CHAR).withName("lastupdate")
    ).withName("PJ_INIT_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[32]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout filename$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static final SequenceLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.asSlice(filename$OFFSET, filename$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filename$OFFSET, filename$LAYOUT.byteSize());
    }

    private static long[] filename$DIMS = { 260 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static long[] filename$dimensions() {
        return filename$DIMS;
    }
    private static final VarHandle filename$ELEM_HANDLE = filename$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static byte filename(MemorySegment struct, long index0) {
        return (byte)filename$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char filename[260]
     * }
     */
    public static void filename(MemorySegment struct, long index0, byte fieldValue) {
        filename$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout version$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static final SequenceLayout version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static MemorySegment version(MemorySegment struct) {
        return struct.asSlice(version$OFFSET, version$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static void version(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, version$OFFSET, version$LAYOUT.byteSize());
    }

    private static long[] version$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static long[] version$dimensions() {
        return version$DIMS;
    }
    private static final VarHandle version$ELEM_HANDLE = version$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static byte version(MemorySegment struct, long index0) {
        return (byte)version$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char version[32]
     * }
     */
    public static void version(MemorySegment struct, long index0, byte fieldValue) {
        version$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout origin$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("origin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static final SequenceLayout origin$layout() {
        return origin$LAYOUT;
    }

    private static final long origin$OFFSET = 324;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static final long origin$offset() {
        return origin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static MemorySegment origin(MemorySegment struct) {
        return struct.asSlice(origin$OFFSET, origin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static void origin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, origin$OFFSET, origin$LAYOUT.byteSize());
    }

    private static long[] origin$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static long[] origin$dimensions() {
        return origin$DIMS;
    }
    private static final VarHandle origin$ELEM_HANDLE = origin$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static byte origin(MemorySegment struct, long index0) {
        return (byte)origin$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char origin[32]
     * }
     */
    public static void origin(MemorySegment struct, long index0, byte fieldValue) {
        origin$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout lastupdate$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lastupdate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static final SequenceLayout lastupdate$layout() {
        return lastupdate$LAYOUT;
    }

    private static final long lastupdate$OFFSET = 356;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static final long lastupdate$offset() {
        return lastupdate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static MemorySegment lastupdate(MemorySegment struct) {
        return struct.asSlice(lastupdate$OFFSET, lastupdate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static void lastupdate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lastupdate$OFFSET, lastupdate$LAYOUT.byteSize());
    }

    private static long[] lastupdate$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static long[] lastupdate$dimensions() {
        return lastupdate$DIMS;
    }
    private static final VarHandle lastupdate$ELEM_HANDLE = lastupdate$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static byte lastupdate(MemorySegment struct, long index0) {
        return (byte)lastupdate$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char lastupdate[16]
     * }
     */
    public static void lastupdate(MemorySegment struct, long index0, byte fieldValue) {
        lastupdate$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

