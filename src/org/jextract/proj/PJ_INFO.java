// Generated by jextract

package org.jextract.proj;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PJ_INFO {
 *     int major;
 *     int minor;
 *     int patch;
 *     const char *release;
 *     const char *version;
 *     const char *searchpath;
 *     const char *const *paths;
 *     size_t path_count;
 * }
 * }
 */
public class PJ_INFO {

    PJ_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        proj_h.C_INT.withName("major"),
        proj_h.C_INT.withName("minor"),
        proj_h.C_INT.withName("patch"),
        MemoryLayout.paddingLayout(4),
        proj_h.C_POINTER.withName("release"),
        proj_h.C_POINTER.withName("version"),
        proj_h.C_POINTER.withName("searchpath"),
        proj_h.C_POINTER.withName("paths"),
        proj_h.C_LONG.withName("path_count")
    ).withName("PJ_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt major$LAYOUT = (OfInt)$LAYOUT.select(groupElement("major"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static final OfInt major$layout() {
        return major$LAYOUT;
    }

    private static final long major$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static final long major$offset() {
        return major$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static int major(MemorySegment struct) {
        return struct.get(major$LAYOUT, major$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int major
     * }
     */
    public static void major(MemorySegment struct, int fieldValue) {
        struct.set(major$LAYOUT, major$OFFSET, fieldValue);
    }

    private static final OfInt minor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static final OfInt minor$layout() {
        return minor$LAYOUT;
    }

    private static final long minor$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static final long minor$offset() {
        return minor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static int minor(MemorySegment struct) {
        return struct.get(minor$LAYOUT, minor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int minor
     * }
     */
    public static void minor(MemorySegment struct, int fieldValue) {
        struct.set(minor$LAYOUT, minor$OFFSET, fieldValue);
    }

    private static final OfInt patch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("patch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int patch
     * }
     */
    public static final OfInt patch$layout() {
        return patch$LAYOUT;
    }

    private static final long patch$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int patch
     * }
     */
    public static final long patch$offset() {
        return patch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int patch
     * }
     */
    public static int patch(MemorySegment struct) {
        return struct.get(patch$LAYOUT, patch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int patch
     * }
     */
    public static void patch(MemorySegment struct, int fieldValue) {
        struct.set(patch$LAYOUT, patch$OFFSET, fieldValue);
    }

    private static final AddressLayout release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *release
     * }
     */
    public static final AddressLayout release$layout() {
        return release$LAYOUT;
    }

    private static final long release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *release
     * }
     */
    public static final long release$offset() {
        return release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *release
     * }
     */
    public static MemorySegment release(MemorySegment struct) {
        return struct.get(release$LAYOUT, release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *release
     * }
     */
    public static void release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(release$LAYOUT, release$OFFSET, fieldValue);
    }

    private static final AddressLayout version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static final AddressLayout version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static MemorySegment version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static void version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout searchpath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("searchpath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *searchpath
     * }
     */
    public static final AddressLayout searchpath$layout() {
        return searchpath$LAYOUT;
    }

    private static final long searchpath$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *searchpath
     * }
     */
    public static final long searchpath$offset() {
        return searchpath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *searchpath
     * }
     */
    public static MemorySegment searchpath(MemorySegment struct) {
        return struct.get(searchpath$LAYOUT, searchpath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *searchpath
     * }
     */
    public static void searchpath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(searchpath$LAYOUT, searchpath$OFFSET, fieldValue);
    }

    private static final AddressLayout paths$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("paths"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *paths
     * }
     */
    public static final AddressLayout paths$layout() {
        return paths$LAYOUT;
    }

    private static final long paths$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *paths
     * }
     */
    public static final long paths$offset() {
        return paths$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *paths
     * }
     */
    public static MemorySegment paths(MemorySegment struct) {
        return struct.get(paths$LAYOUT, paths$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *paths
     * }
     */
    public static void paths(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(paths$LAYOUT, paths$OFFSET, fieldValue);
    }

    private static final OfLong path_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("path_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t path_count
     * }
     */
    public static final OfLong path_count$layout() {
        return path_count$LAYOUT;
    }

    private static final long path_count$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t path_count
     * }
     */
    public static final long path_count$offset() {
        return path_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t path_count
     * }
     */
    public static long path_count(MemorySegment struct) {
        return struct.get(path_count$LAYOUT, path_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t path_count
     * }
     */
    public static void path_count(MemorySegment struct, long fieldValue) {
        struct.set(path_count$LAYOUT, path_count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

